version: '3.8'

services:
  # Production Neural Cryptanalysis API
  neural-crypto-api:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
      args:
        PYTHON_VERSION: 3.11
    container_name: neural-crypto-api
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - NEURAL_CRYPTO_LOG_LEVEL=INFO
      - NEURAL_CRYPTO_SECURITY_MODE=production
      - NEURAL_CRYPTO_AUDIT_LOGGING=true
      - NEURAL_CRYPTO_REQUIRE_AUTHORIZATION=true
      - NEURAL_CRYPTO_DB_URL=postgresql://crypto_user:${POSTGRES_PASSWORD}@neural-crypto-db:5432/cryptanalysis
      - NEURAL_CRYPTO_REDIS_URL=redis://neural-crypto-redis:6379/0
      - NEURAL_CRYPTO_SECRET_KEY=${SECRET_KEY}
      - NEURAL_CRYPTO_JWT_SECRET=${JWT_SECRET}
    volumes:
      - neural-crypto-data:/app/data:ro
      - neural-crypto-results:/app/results
      - neural-crypto-logs:/app/logs
      - neural-crypto-cache:/app/cache
    ports:
      - "8000:8000"
    networks:
      - neural-crypto-net
    depends_on:
      neural-crypto-db:
        condition: service_healthy
      neural-crypto-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import neural_cryptanalysis; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Database for production
  neural-crypto-db:
    image: postgres:15-alpine
    container_name: neural-crypto-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cryptanalysis
      - POSTGRES_USER=crypto_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - neural-crypto-db-data:/var/lib/postgresql/data
      - ./deployment/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./deployment/db/backup:/backup
    networks:
      - neural-crypto-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d cryptanalysis"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis for caching and session management
  neural-crypto-redis:
    image: redis:7-alpine
    container_name: neural-crypto-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    volumes:
      - neural-crypto-redis-data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - neural-crypto-net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Nginx reverse proxy and load balancer
  neural-crypto-nginx:
    image: nginx:1.25-alpine
    container_name: neural-crypto-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - neural-crypto-nginx-logs:/var/log/nginx
    networks:
      - neural-crypto-net
    depends_on:
      - neural-crypto-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Prometheus for metrics collection
  neural-crypto-prometheus:
    image: prom/prometheus:latest
    container_name: neural-crypto-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./deployment/monitoring/alerts:/etc/prometheus/alerts:ro
      - neural-crypto-prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - neural-crypto-net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana for visualization
  neural-crypto-grafana:
    image: grafana/grafana:latest
    container_name: neural-crypto-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=neural-crypto-db:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana_user
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
    volumes:
      - neural-crypto-grafana-data:/var/lib/grafana
      - ./deployment/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - neural-crypto-net
    depends_on:
      - neural-crypto-prometheus
      - neural-crypto-db
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Jaeger for distributed tracing
  neural-crypto-jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: neural-crypto-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://neural-crypto-elasticsearch:9200
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - neural-crypto-net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Elasticsearch for log aggregation
  neural-crypto-elasticsearch:
    image: elasticsearch:8.11.0
    container_name: neural-crypto-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    volumes:
      - neural-crypto-elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - neural-crypto-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Kibana for log visualization
  neural-crypto-kibana:
    image: kibana:8.11.0
    container_name: neural-crypto-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://neural-crypto-elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - neural-crypto-net
    depends_on:
      - neural-crypto-elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Security scanner (Trivy)
  neural-crypto-security:
    image: aquasec/trivy:latest
    container_name: neural-crypto-security
    volumes:
      - neural-crypto-security-cache:/root/.cache/trivy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - neural-crypto-net
    profiles:
      - security
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  neural-crypto-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  neural-crypto-results:
    driver: local
  neural-crypto-logs:
    driver: local
  neural-crypto-cache:
    driver: local
  neural-crypto-db-data:
    driver: local
  neural-crypto-redis-data:
    driver: local
  neural-crypto-prometheus-data:
    driver: local
  neural-crypto-grafana-data:
    driver: local
  neural-crypto-elasticsearch-data:
    driver: local
  neural-crypto-nginx-logs:
    driver: local
  neural-crypto-security-cache:
    driver: local

networks:
  neural-crypto-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  secret_key:
    external: true