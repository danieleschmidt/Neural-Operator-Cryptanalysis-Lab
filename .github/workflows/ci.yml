name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly security scans
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: 3.11
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and compliance scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          bandit-report.json

  # Code quality and testing
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Code formatting check
      run: |
        black --check --diff src/ tests/
        isort --check-only --diff src/ tests/

    - name: Linting
      run: |
        flake8 src/ tests/
        pylint src/ --output-format=json > pylint-report.json || true

    - name: Type checking
      run: |
        mypy src/ --json-report mypy-report

    - name: Run tests with coverage
      run: |
        pytest tests/ \
          --cov=src/neural_cryptanalysis \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=pytest-report.xml \
          --html=pytest-report.html \
          --self-contained-html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-py${{ matrix.python-version }}
        path: |
          pylint-report.json
          mypy-report/
          pytest-report.xml
          pytest-report.html
          coverage.xml
          htmlcov/

  # Documentation build
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        cd docs/
        make html

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/

  # Container build and scan
  container-build:
    name: Container Build & Scan
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gate]
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        target: production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Scan container image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [quality-gate]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -e ".[benchmark]"

    - name: Run benchmarks
      run: |
        pytest benchmarks/ --benchmark-only --benchmark-json=benchmark-results.json

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [container-build]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -e ".[test,integration]"

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/integration/ -v --junit-xml=integration-test-results.xml

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: integration-test-results.xml

  # Compliance and license checks
  compliance:
    name: Compliance & License Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: REUSE Compliance Check
      uses: fsfe/reuse-action@v2

    - name: License scan
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json

    - name: GDPR compliance check
      run: |
        # Custom script to check for GDPR compliance markers
        python scripts/compliance_check.py --standard=gdpr

    - name: CCPA compliance check
      run: |
        python scripts/compliance_check.py --standard=ccpa

    - name: Upload compliance reports
      uses: actions/upload-artifact@v4
      with:
        name: compliance-reports
        path: |
          licenses.json
          compliance-report-*.json

  # Quality gate summary
  quality-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [security-scan, quality-gate, docs-build, container-build, benchmarks, integration-tests, compliance]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate quality report
      run: |
        python -c "
        import json
        import os
        
        report = {
            'status': 'passed' if '${{ needs.security-scan.result }}' == 'success' and 
                               '${{ needs.quality-gate.result }}' == 'success' and
                               '${{ needs.container-build.result }}' == 'success' else 'failed',
            'security_scan': '${{ needs.security-scan.result }}',
            'quality_gate': '${{ needs.quality-gate.result }}',
            'docs_build': '${{ needs.docs-build.result }}',
            'container_build': '${{ needs.container-build.result }}',
            'benchmarks': '${{ needs.benchmarks.result }}',
            'integration_tests': '${{ needs.integration-tests.result }}',
            'compliance': '${{ needs.compliance.result }}'
        }
        
        with open('quality-summary.json', 'w') as f:
            json.dump(report, f, indent=2)
        "

    - name: Comment PR with quality summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('quality-summary.json', 'utf8'));
          
          const status = report.status === 'passed' ? '✅' : '❌';
          const body = `## Quality Gate Summary ${status}
          
          | Check | Status |
          |-------|--------|
          | Security Scan | ${report.security_scan === 'success' ? '✅' : '❌'} |
          | Quality Gate | ${report.quality_gate === 'success' ? '✅' : '❌'} |
          | Documentation | ${report.docs_build === 'success' ? '✅' : '❌'} |
          | Container Build | ${report.container_build === 'success' ? '✅' : '❌'} |
          | Benchmarks | ${report.benchmarks === 'success' ? '✅' : '❌'} |
          | Integration Tests | ${report.integration_tests === 'success' ? '✅' : '❌'} |
          | Compliance | ${report.compliance === 'success' ? '✅' : '❌'} |
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Fail if quality gate failed
      if: needs.security-scan.result != 'success' || needs.quality-gate.result != 'success' || needs.container-build.result != 'success'
      run: exit 1