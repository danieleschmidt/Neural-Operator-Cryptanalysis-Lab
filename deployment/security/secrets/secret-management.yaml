# External Secrets Operator configuration for production secret management
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: neural-crypto-vault
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
spec:
  provider:
    vault:
      server: "https://vault.yourdomain.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "neural-crypto-role"
          serviceAccountRef:
            name: "neural-crypto-vault-auth"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: neural-crypto-database-secret
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
spec:
  refreshInterval: 300s  # Refresh every 5 minutes
  secretStoreRef:
    name: neural-crypto-vault
    kind: SecretStore
  target:
    name: neural-crypto-database-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        POSTGRES_PASSWORD: "{{ .password }}"
        POSTGRES_USER: "{{ .username }}"
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@neural-crypto-postgresql:5432/cryptanalysis"
  data:
  - secretKey: password
    remoteRef:
      key: neural-crypto/database
      property: password
  - secretKey: username
    remoteRef:
      key: neural-crypto/database
      property: username
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: neural-crypto-redis-secret
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: neural-crypto-vault
    kind: SecretStore
  target:
    name: neural-crypto-redis-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        REDIS_PASSWORD: "{{ .password }}"
        REDIS_URL: "redis://:{{ .password }}@neural-crypto-redis:6379/0"
  data:
  - secretKey: password
    remoteRef:
      key: neural-crypto/redis
      property: password
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: neural-crypto-app-secrets
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
spec:
  refreshInterval: 3600s  # Refresh every hour
  secretStoreRef:
    name: neural-crypto-vault
    kind: SecretStore
  target:
    name: neural-crypto-application-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        JWT_SECRET: "{{ .jwt_secret }}"
        SECRET_KEY: "{{ .secret_key }}"
        ENCRYPTION_KEY: "{{ .encryption_key }}"
        API_KEY: "{{ .api_key }}"
  data:
  - secretKey: jwt_secret
    remoteRef:
      key: neural-crypto/application
      property: jwt_secret
  - secretKey: secret_key
    remoteRef:
      key: neural-crypto/application
      property: secret_key
  - secretKey: encryption_key
    remoteRef:
      key: neural-crypto/application
      property: encryption_key
  - secretKey: api_key
    remoteRef:
      key: neural-crypto/application
      property: api_key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: neural-crypto-tls-cert
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
spec:
  refreshInterval: 86400s  # Refresh daily
  secretStoreRef:
    name: neural-crypto-vault
    kind: SecretStore
  target:
    name: neural-crypto-tls-certificate
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .certificate }}"
        tls.key: "{{ .private_key }}"
  data:
  - secretKey: certificate
    remoteRef:
      key: neural-crypto/tls
      property: certificate
  - secretKey: private_key
    remoteRef:
      key: neural-crypto/tls
      property: private_key
---
# Service account for Vault authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: neural-crypto-vault-auth
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
automountServiceAccountToken: true
---
# Sealed Secrets configuration (alternative to Vault)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: neural-crypto-sealed-secrets
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
spec:
  encryptedData:
    # These would be encrypted using kubeseal CLI tool
    POSTGRES_PASSWORD: AgBy3i4OJSWK...  # Encrypted with cluster public key
    REDIS_PASSWORD: AgAKAoiQm...        # Encrypted with cluster public key
    JWT_SECRET: AgCKooQpo...             # Encrypted with cluster public key
    SECRET_KEY: AgDKmQaGp...             # Encrypted with cluster public key
  template:
    metadata:
      name: neural-crypto-sealed-secrets
      namespace: neural-cryptanalysis
    type: Opaque
---
# SOPS configuration for GitOps secret management
apiVersion: v1
kind: Secret
metadata:
  name: neural-crypto-sops-pgp
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # PGP private key for SOPS decryption (base64 encoded)
  sops.asc: LS0tLS1CRUdJTiBQR1AgUFJJVkFURSBLRVkgQkxPQ0s...
---
# CSI Secret Store Driver configuration
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: neural-crypto-secrets-csi
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
spec:
  provider: vault
  secretObjects:
  - secretName: neural-crypto-csi-secrets
    type: Opaque
    data:
    - objectName: database-password
      key: POSTGRES_PASSWORD
    - objectName: redis-password
      key: REDIS_PASSWORD
    - objectName: jwt-secret
      key: JWT_SECRET
  parameters:
    vaultAddress: "https://vault.yourdomain.com"
    roleName: "neural-crypto-role"
    objects: |
      - objectName: "database-password"
        secretPath: "secret/data/neural-crypto/database"
        secretKey: "password"
      - objectName: "redis-password"
        secretPath: "secret/data/neural-crypto/redis"
        secretKey: "password"
      - objectName: "jwt-secret"
        secretPath: "secret/data/neural-crypto/application"
        secretKey: "jwt_secret"
---
# Secret rotation configuration
apiVersion: batch/v1
kind: CronJob
metadata:
  name: neural-crypto-secret-rotation
  namespace: neural-cryptanalysis
  labels:
    app.kubernetes.io/name: neural-cryptanalysis
    app.kubernetes.io/component: secrets
spec:
  schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: neural-crypto-vault-auth
          restartPolicy: OnFailure
          containers:
          - name: secret-rotator
            image: vault:latest
            command:
            - /bin/sh
            - -c
            - |
              # Script to rotate secrets
              echo "Starting secret rotation..."
              
              # Generate new database password
              NEW_DB_PASSWORD=$(openssl rand -base64 32)
              
              # Update password in Vault
              vault kv put secret/neural-crypto/database password="$NEW_DB_PASSWORD"
              
              # Restart deployments to pick up new secrets
              kubectl rollout restart deployment/neural-crypto-api -n neural-cryptanalysis
              kubectl rollout restart deployment/neural-crypto-postgresql -n neural-cryptanalysis
              
              echo "Secret rotation completed"
            env:
            - name: VAULT_ADDR
              value: "https://vault.yourdomain.com"
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: vault-token
                  key: token
            volumeMounts:
            - name: kube-api-access
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
          volumes:
          - name: kube-api-access
            projected:
              sources:
              - serviceAccountToken:
                  path: token
              - configMap:
                  items:
                  - key: ca.crt
                    path: ca.crt
                  name: kube-root-ca.crt
              - downwardAPI:
                  items:
                  - fieldRef:
                      fieldPath: metadata.namespace
                    path: namespace